version: '3.8'
services:
  #database section
  #orderdb sql-server
  orderdb:
    container_name: orderdb
    environment:
        SA_PASSWORD: "Passw0rd!"
        ACCEPT_EULA: "Y"
    restart: always
    volumes:
        - sqlserver_data:/var/lib/sqlserver/data
    ports:
        - "1435:1433" 

  #productdb mysql
  productdb:
    container_name: productdb
    ## do not use this command in Windows
#    command: [ "--default-authentication-plugin=mysql_native_password" ]
    environment:
      MYSQL_ROOT_PASSWORD: "PassWOrd"
      MYSQL_DATABASE: "ProductDB"
    restart: always
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"

  #customerdb postgres
  customerdb:
    container_name: customerdb
    environment:
        - POSTGRES_USER=admin
        - POSTGRES_PASSWORD=admin1234
        - POSTGRES_DB=Customerdb
    restart: always
    volumes:
        - postgres_data:/var/lib/postgresql/data
    ports:
        - "5433:5432" 
  
  #basketdb redis
  basketdb:
    container_name: basketdb
    restart: always
    ports:
        - "6379:6379" 

  #inventorydb mongo
  inventorydb:
    container_name: inventorydb
    restart: always
    ports:
        - "27017:27017" 
    volumes:
        - mongo_data:/data/db

  #infrastructure section
  rabbitmq:
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672" 
      - "15672:15672"
    hostname: rabbitmq
   
  pgadmin:
    container_name: pgadmin
    environment:
        - PGADMIN_DEFAULT_EMAIL=sangspd20@gmail.com
        - PGADMIN_DEFAULT_PASSWORD=admin1234
    restart: always
    volumes:
        - pgadmin_data:/root/.pgadmin
    ports:
        - "5050:80" 
  portainer:
    container_name: portainer
    restart: always
    ports:
       - "8085:8000" 
       - "9000:9000" 
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - portainer_data:/data
  
  elasticsearch:
    container_name: elasticsearch
    environment:
        - xpack.monitoring.enabled=true
        - xpack.watcher.enabled=false
        - "ES_JAVA_OPTS=-Xms512m -Xms512m"
        - discovery.type=single-node
    volumes:
        - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
        - "9200:9200" 
  kibana:
    container_name: kibana
    environment:
        - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
        - elasticsearch
    ports:
        - "5601:5601" 

#microservices api sections
  product.api:
    container_name: product.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnectionString=Server=productdb;Database=ProductDB;Uid=root;Pwd=PassWOrd"
    depends_on:
      - productdb
    ports:
      - "6002:80"
    restart: always

  customer.api:
    container_name: customer.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnectionString=Server=customerdb;Database=CustomerDb;User Id=admin;Pwd=admin1234;"
    depends_on:
      - customerdb
    ports:
      - "6003:80"
    restart: always

  basket.api:
    container_name: basket.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "CacheSettings:ConnectionString=basketdb:6379"
      - "EventBusSettings:HostAddress=amqp://guest:guest@rabbitmq:5672"

    depends_on:
      - basketdb
      - rabbitmq
    ports:
      - "6004:80"
    restart: always

  ordering.api:
    container_name: ordering.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnectionString=Server=orderdb;Database=OrderDb;User Id=sa;Password=Passw0rd!;Multipleactiveresultsets=true;TrustServerCertificate=true;Connection Timeout=30;"
      - "EventBusSettings:HostAddress=amqp://guest:guest@rabbitmq:5672"
    depends_on:
      - orderdb
      - rabbitmq
    ports:
      - "6005:80"
    restart: always